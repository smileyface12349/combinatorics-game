class_name BijectionLevel1
extends BijectionLevel

func _init() -> void:
	super(
		1,
		"Subsets",
		"Binary Strings",
		"Subsets of {1, 2, ..., n}",
		"Binary strings of length n",
		{
			0: Bijection.new(
				0,
				# Left elements
				[
					BijectionElement.new("{}", 1, [1]), 
				],
				# Right elements 
				[
					BijectionElement.new("", 1),
				]
			),
			1: Bijection.new(
				1,
				# Left elements
				[
					BijectionElement.new("{}", 1, [1]), 
					BijectionElement.new("{1}", 2, [2]),
				],
				# Right elements 
				[
					BijectionElement.new("0", 1),
					BijectionElement.new("1", 2),
				]
			),
			2: Bijection.new(
				2,
				# Left elements
				[
					BijectionElement.new("{}", 1, [1]), 
					BijectionElement.new("{1}", 2, [3]),
					BijectionElement.new("{2}", 3, [2]),
					BijectionElement.new("{1, 2}", 4, [4]),
				],
				# Right elements 
				[
					BijectionElement.new("00", 1),
					BijectionElement.new("10", 2),
					BijectionElement.new("01", 3),
					BijectionElement.new("11", 4),
				]
			),
			3: Bijection.new(
				3,
				# Left elements
				[
					BijectionElement.new("{}", 1, [1]), 
					BijectionElement.new("{1}", 2, [5]),
					BijectionElement.new("{2}", 3, [3]),
					BijectionElement.new("{1, 2}", 4, [7]),
					BijectionElement.new("{3}", 5, [2]), 
					BijectionElement.new("{1, 3}", 6, [6]),
					BijectionElement.new("{2, 3}", 7, [4]),
					BijectionElement.new("{1, 2, 3}", 8, [8]),
				],
				# Right elements 
				[
					BijectionElement.new("000", 1),
					BijectionElement.new("100", 2),
					BijectionElement.new("010", 3),
					BijectionElement.new("110", 4),
					BijectionElement.new("001", 5),
					BijectionElement.new("101", 6),
					BijectionElement.new("011", 7),
					BijectionElement.new("111", 8)
				]
			),
			# n = 4, generated by ChatGPT
			#4: Bijection.new(
				#4,
				## Left elements
				#[
					#BijectionElement.new("{}", 1), 
					#BijectionElement.new("{1}", 2),
					#BijectionElement.new("{2}", 3),
					#BijectionElement.new("{1, 2}", 4),
					#BijectionElement.new("{3}", 5), 
					#BijectionElement.new("{1, 3}", 6),
					#BijectionElement.new("{2, 3}", 7),
					#BijectionElement.new("{1, 2, 3}", 8),
					#BijectionElement.new("{4}", 9),
					#BijectionElement.new("{1, 4}", 10),
					#BijectionElement.new("{2, 4}", 11),
					#BijectionElement.new("{1, 2, 4}", 12),
					#BijectionElement.new("{3, 4}", 13),
					#BijectionElement.new("{1, 3, 4}", 14),
					#BijectionElement.new("{2, 3, 4}", 15),
					#BijectionElement.new("{1, 2, 3, 4}", 16),
				#],
				## Right elements 
				#[
					#BijectionElement.new("0000", 1),
					#BijectionElement.new("1000", 2),
					#BijectionElement.new("0100", 3),
					#BijectionElement.new("1100", 4),
					#BijectionElement.new("0010", 5),
					#BijectionElement.new("1010", 6),
					#BijectionElement.new("0110", 7),
					#BijectionElement.new("1110", 8),
					#BijectionElement.new("0001", 9),
					#BijectionElement.new("1001", 10),
					#BijectionElement.new("0101", 11),
					#BijectionElement.new("1101", 12),
					#BijectionElement.new("0011", 13),
					#BijectionElement.new("1011", 14),
					#BijectionElement.new("0111", 15),
					#BijectionElement.new("1111", 16)
				#]
			#),
		},
		func generate_left(size: int) -> Array[Array]:
			var elements: Array[Array] = []
			for bit_string: int in range(2 ** size):
				var element: Array = []
				for i: int in range(size):
					if bit_string & (1 << i) != 0:
						element.append(i + 1)
				elements.append(element)
			return elements,
		func generate_right(size: int) -> Array[String]:
			var elements: Array[String] = []
			for bit_string: int in range(2 ** size):
				elements.append(String.num_int64(bit_string, 2).pad_zeros(size))
			return elements,
		"An array with the elements of the set, in increasing order. E.g. [1, 3]",
		"A string of zeroes and ones e.g. \"0110\"",
		[],
		"There's one value in the binary string for each element potentially in the subset. These each have two choices (0 or 1) - what could this represent for the corresponding element potentially in the subset?",
		BijectionProof.new(""),
		1
	)
	
